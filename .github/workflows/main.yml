name: Release new version

on:
  push:
    branches:
      - main

jobs:
  windows-linux:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4.0.2

      - name: Get current version
        id: get_version
        run: |
          echo "::set-output name=version::$(node -p "require('./package.json').version")"

      - name: Check if release needed
        id: check_release
        run: |
          try {
          $LATEST_VERSION = (Invoke-WebRequest -Uri "https://api.github.com/repos/${{ github.repository }}/releases/latest").Content | ConvertFrom-Json | Select-Object -ExpandProperty tag_name -First 1
          if ($LATEST_VERSION -ne "${{ steps.get_version.outputs.version }}") {
            echo "::set-output name=release_needed::true"
          } else {
            echo "::set-output name=release_needed::false"
          }
          }
          catch {
            echo "::set-output name=release_needed::true"
          }

      - name: Install dependencies and build releases
        if: steps.check_release.outputs.release_needed == 'true'
        run: |
          npm i
          npm run release

      - name: Upload Windows unpacked
        if: steps.check_release.outputs.release_needed == 'true'
        uses: actions/upload-artifact@v4.3.1
        with:
          name: win-unpacked
          path: releases/win32/x64/win-unpacked

      - name: Upload Linux unpacked
        if: steps.check_release.outputs.release_needed == 'true'
        uses: actions/upload-artifact@v4.3.1
        with:
          name: lin-unpacked
          path: releases/win32/x64/linux-unpacked

      - name: Upload Squirrel.exe
        if: steps.check_release.outputs.release_needed == 'true'
        uses: actions/upload-artifact@v4.3.1
        with:
          name: squirrel.exe
          path: releases/win32/x64/squirrel-windows/*.exe

  release:
    runs-on: ubuntu-latest
    needs: windows-linux
    steps:
      - name: Check if release needed
        id: check_release
        run: |
          LATEST_VERSION=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r '.tag_name' | sed 's/v//')
          if [ "${LATEST_VERSION}" != "${{ steps.get_version.outputs.version }}" ]; then
            echo "::set-output name=release_needed::true"
          else
            echo "::set-output name=release_needed::false"
          fi
      - name: Create release
        if: steps.check_release.outputs.release_needed == 'true'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          body: |
            Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload artifacts
        if: steps.check_release.outputs.release_needed == 'true'
        uses: actions/upload-artifact@v4.3.1
        with:
          name: release-artifacts
          path: |
            releases/win-unpacked
            releases/lin-unpacked
            releases/win32/x64/squirrel-windows/*.exe
      - name: Complete
        if: steps.check_release.outputs.release_needed == 'true'
        run: echo "New release created"
